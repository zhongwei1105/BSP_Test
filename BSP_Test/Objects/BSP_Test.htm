<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BSP_Test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BSP_Test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6100100: Last Updated: Thu Sep 13 09:15:46 2018
<BR><P>
<H3>Maximum Stack Usage =        324 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">NMI_Handler</a><BR>
 <LI><a href="#[d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">HardFault_Handler</a><BR>
 <LI><a href="#[e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">BusFault_Handler</a><BR>
 <LI><a href="#[10]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">UsageFault_Handler</a><BR>
 <LI><a href="#[11]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">SVC_Handler</a><BR>
 <LI><a href="#[12]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">DebugMon_Handler</a><BR>
 <LI><a href="#[13]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">PendSV_Handler</a><BR>
 <LI><a href="#[2e]">CC312_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">CC312_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[f]">BusFault_Handler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[2e]">CC312_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[2d]">FLASH_CACHE_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[59]">Formula000</a> from formula.o(.text.Formula000) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[5a]">Formula001</a> from formula.o(.text.Formula001) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[5b]">Formula002</a> from formula.o(.text.Formula002) referenced 4 times from formula.o(.rodata.DSControl)
 <LI><a href="#[5c]">Formula003</a> from formula.o(.text.Formula003) referenced 4 times from formula.o(.rodata.DSControl)
 <LI><a href="#[5d]">Formula004</a> from formula.o(.text.Formula004) referenced 2 times from formula.o(.rodata.DSControl)
 <LI><a href="#[5e]">Formula005</a> from formula.o(.text.Formula005) referenced 2 times from formula.o(.rodata.DSControl)
 <LI><a href="#[5f]">Formula006</a> from formula.o(.text.Formula006) referenced 4 times from formula.o(.rodata.DSControl)
 <LI><a href="#[60]">Formula007</a> from formula.o(.text.Formula007) referenced 3 times from formula.o(.rodata.DSControl)
 <LI><a href="#[61]">Formula008</a> from formula.o(.text.Formula008) referenced 2 times from formula.o(.rodata.DSControl)
 <LI><a href="#[62]">Formula009</a> from formula.o(.text.Formula009) referenced 2 times from formula.o(.rodata.DSControl)
 <LI><a href="#[63]">Formula010</a> from formula.o(.text.Formula010) referenced 2 times from formula.o(.rodata.DSControl)
 <LI><a href="#[64]">Formula011</a> from formula.o(.text.Formula011) referenced 2 times from formula.o(.rodata.DSControl)
 <LI><a href="#[65]">Formula012</a> from formula.o(.text.Formula012) referenced 2 times from formula.o(.rodata.DSControl)
 <LI><a href="#[66]">Formula013</a> from formula.o(.text.Formula013) referenced 2 times from formula.o(.rodata.DSControl)
 <LI><a href="#[67]">Formula014</a> from formula.o(.text.Formula014) referenced 2 times from formula.o(.rodata.DSControl)
 <LI><a href="#[68]">Formula015</a> from formula.o(.text.Formula015) referenced 2 times from formula.o(.rodata.DSControl)
 <LI><a href="#[69]">Formula016</a> from formula.o(.text.Formula016) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[6a]">Formula017</a> from formula.o(.text.Formula017) referenced 2 times from formula.o(.rodata.DSControl)
 <LI><a href="#[6b]">Formula018</a> from formula.o(.text.Formula018) referenced 15 times from formula.o(.rodata.DSControl)
 <LI><a href="#[6c]">Formula019</a> from formula.o(.text.Formula019) referenced 4 times from formula.o(.rodata.DSControl)
 <LI><a href="#[6d]">Formula020</a> from formula.o(.text.Formula020) referenced 4 times from formula.o(.rodata.DSControl)
 <LI><a href="#[6e]">Formula021</a> from formula.o(.text.Formula021) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[6f]">Formula022</a> from formula.o(.text.Formula022) referenced 4 times from formula.o(.rodata.DSControl)
 <LI><a href="#[70]">Formula023</a> from formula.o(.text.Formula023) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[71]">Formula024</a> from formula.o(.text.Formula024) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[72]">Formula025</a> from formula.o(.text.Formula025) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[73]">Formula026</a> from formula.o(.text.Formula026) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[74]">Formula027</a> from formula.o(.text.Formula027) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[75]">Formula028</a> from formula.o(.text.Formula028) referenced 8 times from formula.o(.rodata.DSControl)
 <LI><a href="#[76]">Formula029</a> from formula.o(.text.Formula029) referenced 8 times from formula.o(.rodata.DSControl)
 <LI><a href="#[77]">Formula030</a> from formula.o(.text.Formula030) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[78]">Formula031</a> from formula.o(.text.Formula031) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[79]">Formula032</a> from formula.o(.text.Formula032) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[7a]">Formula033</a> from formula.o(.text.Formula033) referenced 5 times from formula.o(.rodata.DSControl)
 <LI><a href="#[7b]">Formula034</a> from formula.o(.text.Formula034) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[7c]">Formula035</a> from formula.o(.text.Formula035) referenced 2 times from formula.o(.rodata.DSControl)
 <LI><a href="#[7d]">Formula036</a> from formula.o(.text.Formula036) referenced 17 times from formula.o(.rodata.DSControl)
 <LI><a href="#[7e]">Formula037</a> from formula.o(.text.Formula037) referenced 8 times from formula.o(.rodata.DSControl)
 <LI><a href="#[7f]">Formula038</a> from formula.o(.text.Formula038) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[80]">Formula039</a> from formula.o(.text.Formula039) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[81]">Formula040</a> from formula.o(.text.Formula040) referenced 8 times from formula.o(.rodata.DSControl)
 <LI><a href="#[82]">Formula041</a> from formula.o(.text.Formula041) referenced 4 times from formula.o(.rodata.DSControl)
 <LI><a href="#[83]">Formula042</a> from formula.o(.text.Formula042) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[84]">Formula043</a> from formula.o(.text.Formula043) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[85]">Formula044</a> from formula.o(.text.Formula044) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[86]">Formula045</a> from formula.o(.text.Formula045) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[87]">Formula046</a> from formula.o(.text.Formula046) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[88]">Formula047</a> from formula.o(.text.Formula047) referenced 4 times from formula.o(.rodata.DSControl)
 <LI><a href="#[89]">Formula048</a> from formula.o(.text.Formula048) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[8a]">Formula049</a> from formula.o(.text.Formula049) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[8b]">Formula050</a> from formula.o(.text.Formula050) referenced from formula.o(.rodata.DSControl)
 <LI><a href="#[2a]">GPDMA_COMBINE_IRQHandler</a> from gpdma_mizar.o(.text.GPDMA_COMBINE_IRQHandler) referenced from startup_m100.o(RESET)
 <LI><a href="#[2c]">GPDMA_ERR_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[2b]">GPDMA_TC_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[3a]">GPIO0_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[3b]">GPIO1_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[3c]">GPIO2_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[3d]">GPIO3_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[3e]">GPIO4_IRQHandler</a> from thinktech_mcp2515.o(.text.GPIO4_IRQHandler) referenced from startup_m100.o(RESET)
 <LI><a href="#[3f]">GPIO5_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[40]">GPIO6_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[41]">GPIO7_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[42]">GPIO_COMBINE_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[33]">I2C0_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[32]">I2C1_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[56]">MCP2515_ReadByte</a> from thinktech_mcp2515.o(.text.MCP2515_ReadByte) referenced from thinktech_obd.o(.text.Send_CANFrame)
 <LI><a href="#[55]">MCP2515_WriteByte</a> from thinktech_mcp2515.o(.text.MCP2515_WriteByte) referenced from thinktech_mcp2515.o(.text.MCP2515_Init)
 <LI><a href="#[55]">MCP2515_WriteByte</a> from thinktech_mcp2515.o(.text.MCP2515_WriteByte) referenced from thinktech_obd.o(.text.Send_CANFrame)
 <LI><a href="#[e]">MemManage_Handler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[2f]">PKI_RSA_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[b]">Reset_Handler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[54]">SPI_callback_func</a> from thinktech_mcp2515.o(.text.SPI_callback_func) referenced from thinktech_mcp2515.o(.text.MCP2515_Init)
 <LI><a href="#[29]">SSP0_COMBINE_IRQHandler</a> from ssp_mizar.o(.text.SSP0_COMBINE_IRQHandler) referenced from startup_m100.o(RESET)
 <LI><a href="#[95]">SSP0_Control</a> from ssp_mizar.o(.text.SSP0_Control) referenced from ssp_mizar.o(.rodata.Driver_SPI0)
 <LI><a href="#[a6]">SSP0_GPDMA_Rx_SignalEvent</a> from ssp_mizar.o(.text.SSP0_GPDMA_Rx_SignalEvent) referenced from ssp_mizar.o(.rodata.SSP0_Resources)
 <LI><a href="#[a5]">SSP0_GPDMA_Tx_SignalEvent</a> from ssp_mizar.o(.text.SSP0_GPDMA_Tx_SignalEvent) referenced from ssp_mizar.o(.rodata.SSP0_Resources)
 <LI><a href="#[94]">SSP0_GetDataCount</a> from ssp_mizar.o(.text.SSP0_GetDataCount) referenced from ssp_mizar.o(.rodata.Driver_SPI0)
 <LI><a href="#[96]">SSP0_GetStatus</a> from ssp_mizar.o(.text.SSP0_GetStatus) referenced from ssp_mizar.o(.rodata.Driver_SPI0)
 <LI><a href="#[8e]">SSP0_Initialize</a> from ssp_mizar.o(.text.SSP0_Initialize) referenced from ssp_mizar.o(.rodata.Driver_SPI0)
 <LI><a href="#[90]">SSP0_PowerControl</a> from ssp_mizar.o(.text.SSP0_PowerControl) referenced from ssp_mizar.o(.rodata.Driver_SPI0)
 <LI><a href="#[26]">SSP0_ROR_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[25]">SSP0_RT_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[28]">SSP0_RX_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[92]">SSP0_Receive</a> from ssp_mizar.o(.text.SSP0_Receive) referenced from ssp_mizar.o(.rodata.Driver_SPI0)
 <LI><a href="#[91]">SSP0_Send</a> from ssp_mizar.o(.text.SSP0_Send) referenced from ssp_mizar.o(.rodata.Driver_SPI0)
 <LI><a href="#[27]">SSP0_TX_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[93]">SSP0_Transfer</a> from ssp_mizar.o(.text.SSP0_Transfer) referenced from ssp_mizar.o(.rodata.Driver_SPI0)
 <LI><a href="#[8f]">SSP0_Uninitialize</a> from ssp_mizar.o(.text.SSP0_Uninitialize) referenced from ssp_mizar.o(.rodata.Driver_SPI0)
 <LI><a href="#[24]">SSP1_COMBINE_IRQHandler</a> from ssp_mizar.o(.text.SSP1_COMBINE_IRQHandler) referenced from startup_m100.o(RESET)
 <LI><a href="#[a8]">SSP1_GPDMA_Rx_SignalEvent</a> from ssp_mizar.o(.text.SSP1_GPDMA_Rx_SignalEvent) referenced from ssp_mizar.o(.rodata.SSP1_Resources)
 <LI><a href="#[a7]">SSP1_GPDMA_Tx_SignalEvent</a> from ssp_mizar.o(.text.SSP1_GPDMA_Tx_SignalEvent) referenced from ssp_mizar.o(.rodata.SSP1_Resources)
 <LI><a href="#[21]">SSP1_ROR_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[20]">SSP1_RT_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[23]">SSP1_RX_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[22]">SSP1_TX_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[1f]">SSP2_COMBINE_IRQHandler</a> from ssp_mizar.o(.text.SSP2_COMBINE_IRQHandler) referenced from startup_m100.o(RESET)
 <LI><a href="#[aa]">SSP2_GPDMA_Rx_SignalEvent</a> from ssp_mizar.o(.text.SSP2_GPDMA_Rx_SignalEvent) referenced from ssp_mizar.o(.rodata.SSP2_Resources)
 <LI><a href="#[a9]">SSP2_GPDMA_Tx_SignalEvent</a> from ssp_mizar.o(.text.SSP2_GPDMA_Tx_SignalEvent) referenced from ssp_mizar.o(.rodata.SSP2_Resources)
 <LI><a href="#[1c]">SSP2_ROR_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[1b]">SSP2_RT_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[1e]">SSP2_RX_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[1d]">SSP2_TX_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[1a]">SSP3_COMBINE_IRQHandler</a> from ssp_mizar.o(.text.SSP3_COMBINE_IRQHandler) referenced from startup_m100.o(RESET)
 <LI><a href="#[ac]">SSP3_GPDMA_Rx_SignalEvent</a> from ssp_mizar.o(.text.SSP3_GPDMA_Rx_SignalEvent) referenced from ssp_mizar.o(.rodata.SSP3_Resources)
 <LI><a href="#[ab]">SSP3_GPDMA_Tx_SignalEvent</a> from ssp_mizar.o(.text.SSP3_GPDMA_Tx_SignalEvent) referenced from ssp_mizar.o(.rodata.SSP3_Resources)
 <LI><a href="#[17]">SSP3_ROR_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[16]">SSP3_RT_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[19]">SSP3_RX_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[18]">SSP3_TX_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[8d]">SSP_GetCapabilities</a> from ssp_mizar.o(.text.SSP_GetCapabilities) referenced from ssp_mizar.o(.rodata.Driver_SPI0)
 <LI><a href="#[8c]">SSP_GetVersion</a> from ssp_mizar.o(.text.SSP_GetVersion) referenced from ssp_mizar.o(.rodata.Driver_SPI0)
 <LI><a href="#[11]">SVC_Handler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[57]">SetPllFreq</a> from system_m100.o(.text.SetPllFreq) referenced from system_m100.o(.text.SystemInit)
 <LI><a href="#[14]">SysTick_Handler</a> from system_m100.o(.text.SysTick_Handler) referenced from startup_m100.o(RESET)
 <LI><a href="#[4e]">SystemInit</a> from system_m100.o(.text.SystemInit) referenced from startup_m100.o(.text)
 <LI><a href="#[30]">TIMER_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[4a]">TRNG0_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[4b]">TRNG1_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[4c]">TRNG2_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[4d]">TRNG3_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[15]">TRNG_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[34]">UART0_COMBINE_IRQHandler</a> from usart_mizar.o(.text.UART0_COMBINE_IRQHandler) referenced from startup_m100.o(RESET)
 <LI><a href="#[35]">UART0_ERR_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[39]">UART0_MS_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[36]">UART0_RT_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[38]">UART0_RX_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[37]">UART0_TX_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[44]">UART1_COMBINE_IRQHandler</a> from usart_mizar.o(.text.UART1_COMBINE_IRQHandler) referenced from startup_m100.o(RESET)
 <LI><a href="#[45]">UART1_ERR_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[49]">UART1_MS_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[46]">UART1_RT_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[48]">UART1_RX_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[47]">UART1_TX_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[58]">UART_callback</a> from system_m100.o(.text.UART_callback) referenced from system_m100.o(.text.stdout_putchar)
 <LI><a href="#[a1]">USART1_Control</a> from usart_mizar.o(.text.USART1_Control) referenced from usart_mizar.o(.rodata.Driver_USART1)
 <LI><a href="#[98]">USART1_GetCapabilities</a> from usart_mizar.o(.text.USART1_GetCapabilities) referenced from usart_mizar.o(.rodata.Driver_USART1)
 <LI><a href="#[a4]">USART1_GetModemStatus</a> from usart_mizar.o(.text.USART1_GetModemStatus) referenced from usart_mizar.o(.rodata.Driver_USART1)
 <LI><a href="#[a0]">USART1_GetRxCount</a> from usart_mizar.o(.text.USART1_GetRxCount) referenced from usart_mizar.o(.rodata.Driver_USART1)
 <LI><a href="#[a2]">USART1_GetStatus</a> from usart_mizar.o(.text.USART1_GetStatus) referenced from usart_mizar.o(.rodata.Driver_USART1)
 <LI><a href="#[9f]">USART1_GetTxCount</a> from usart_mizar.o(.text.USART1_GetTxCount) referenced from usart_mizar.o(.rodata.Driver_USART1)
 <LI><a href="#[99]">USART1_Initialize</a> from usart_mizar.o(.text.USART1_Initialize) referenced from usart_mizar.o(.rodata.Driver_USART1)
 <LI><a href="#[9b]">USART1_PowerControl</a> from usart_mizar.o(.text.USART1_PowerControl) referenced from usart_mizar.o(.rodata.Driver_USART1)
 <LI><a href="#[9d]">USART1_Receive</a> from usart_mizar.o(.text.USART1_Receive) referenced from usart_mizar.o(.rodata.Driver_USART1)
 <LI><a href="#[9c]">USART1_Send</a> from usart_mizar.o(.text.USART1_Send) referenced from usart_mizar.o(.rodata.Driver_USART1)
 <LI><a href="#[a3]">USART1_SetModemControl</a> from usart_mizar.o(.text.USART1_SetModemControl) referenced from usart_mizar.o(.rodata.Driver_USART1)
 <LI><a href="#[9e]">USART1_Transfer</a> from usart_mizar.o(.text.USART1_Transfer) referenced from usart_mizar.o(.rodata.Driver_USART1)
 <LI><a href="#[9a]">USART1_Uninitialize</a> from usart_mizar.o(.text.USART1_Uninitialize) referenced from usart_mizar.o(.rodata.Driver_USART1)
 <LI><a href="#[97]">USARTx_GetVersion</a> from usart_mizar.o(.text.USARTx_GetVersion) referenced from usart_mizar.o(.rodata.Driver_USART1)
 <LI><a href="#[10]">UsageFault_Handler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[31]">WDT_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[53]">__2printf</a> from __2printf.o(.text) referenced from thinktech_mcp2515.o(.text.MCP2515_Init)
 <LI><a href="#[ad]">__main</a> from __main.o(!!!main) referenced from startup_m100.o(.text)
 <LI><a href="#[51]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[50]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[43]">eFLASH_IRQHandler</a> from startup_m100.o(.text) referenced from startup_m100.o(RESET)
 <LI><a href="#[52]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ad]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ae]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b0]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[176]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[177]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b1]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[178]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b2]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[df]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b4]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b5]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b6]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[b8]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ba]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[bc]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[179]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[cb]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[17a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[be]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[17b]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[17d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[180]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[181]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[182]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[183]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[184]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[185]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[186]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[187]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[188]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[189]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[18a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[18b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[18c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[18d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[18e]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[d0]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[18f]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[c6]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[190]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[191]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[192]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[193]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[194]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[195]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[af]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[196]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[c8]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ca]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[197]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[cc]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ISO15765_4_Drv &rArr; ISO15765_4_DTC &rArr; PCBU &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[198]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[10c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[cf]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[199]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[d1]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CC312_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC312_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC312_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>FLASH_CACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPDMA_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPDMA_TC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>GPIO3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>GPIO5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIO6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIO7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>GPIO_COMBINE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PKI_RSA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SSP0_ROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SSP0_RT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SSP0_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SSP0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SSP1_ROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SSP1_RT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SSP1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SSP1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SSP2_ROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SSP2_RT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SSP2_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SSP2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SSP3_ROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SSP3_RT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP3_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SSP3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TRNG0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TRNG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TRNG2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TRNG3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART0_MS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART0_RT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART0_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UART0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART1_MS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART1_RT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>eFLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_m100.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[53]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_DS
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_Drv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Drv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thinktech_mcp2515.o(.text.MCP2515_Init)
</UL>
<P><STRONG><a name="[d4]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCBU
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_DS
</UL>

<P><STRONG><a name="[d7]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[d8]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[d6]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b9]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[da]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[bb]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[db]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[dc]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[dd]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[e0]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_DS
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_Drv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Drv
</UL>

<P><STRONG><a name="[160]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Check_Cmd
</UL>

<P><STRONG><a name="[120]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_DTC
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_DS
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula016
</UL>

<P><STRONG><a name="[135]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyDSStatus
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCBU
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_DTC
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_DS
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_Drv
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e1]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[19a]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_PowerControl
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Initialize
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[e3]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_VIN
</UL>

<P><STRONG><a name="[161]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[19d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[eb]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ee]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[d5]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[50]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[ef]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[f0]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[bd]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[d3]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[f2]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1a1]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[ea]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ed]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[e6]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f1]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[f4]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[169]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1a2]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[c7]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[1a3]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a4]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[f9]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[100]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[fe]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[f6]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[fa]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[107]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[f5]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[fc]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[10a]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ff]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[1a5]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[fd]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[103]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1a6]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[110]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[bf]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[112]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[9]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1a8]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[10d]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[d2]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[10f]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1a9]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1aa]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[111]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[116]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1ab]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[1ae]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[118]"></a>CAN_Receive_Buffer</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, thinktech_mcp2515.o(.text.CAN_Receive_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_Receive_Buffer &rArr; MCP2515_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_WriteByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_CANFrame
</UL>

<P><STRONG><a name="[119]"></a>CAN_Send_Buffer</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, thinktech_mcp2515.o(.text.CAN_Send_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_Send_Buffer &rArr; MCP2515_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_WriteByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_CANFrame
</UL>

<P><STRONG><a name="[11a]"></a>CMD_Drv</STRONG> (Thumb, 912 bytes, Stack size 16 bytes, thinktech_cmd.o(.text.CMD_Drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CMD_Drv &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Check_Cmd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_Config
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clean_RX_BUF
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>Clean_ESP8266_RX_BUF</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, thinktech_esp8266.o(.text.Clean_ESP8266_RX_BUF))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11c]"></a>Clean_RX_BUF</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_m100.o(.text.Clean_RX_BUF))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Drv
</UL>

<P><STRONG><a name="[59]"></a>Formula000</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, formula.o(.text.Formula000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Formula000
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[5a]"></a>Formula001</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula001))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[5b]"></a>Formula002</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula002))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[5c]"></a>Formula003</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula003))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[5d]"></a>Formula004</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula004))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[5e]"></a>Formula005</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula005))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[5f]"></a>Formula006</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula006))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[60]"></a>Formula007</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula007))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[61]"></a>Formula008</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula008))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[62]"></a>Formula009</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula009))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[63]"></a>Formula010</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula010))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[64]"></a>Formula011</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula011))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[65]"></a>Formula012</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula012))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[66]"></a>Formula013</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula013))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[67]"></a>Formula014</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula014))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[68]"></a>Formula015</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula015))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[69]"></a>Formula016</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, formula.o(.text.Formula016))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Formula016 &rArr; PCBU &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCBU
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[6a]"></a>Formula017</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, formula.o(.text.Formula017))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[6b]"></a>Formula018</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, formula.o(.text.Formula018))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula018 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[6c]"></a>Formula019</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, formula.o(.text.Formula019))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Formula019
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[6d]"></a>Formula020</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, formula.o(.text.Formula020))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula020 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[6e]"></a>Formula021</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, formula.o(.text.Formula021))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Formula021
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[6f]"></a>Formula022</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, formula.o(.text.Formula022))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Formula022
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[70]"></a>Formula023</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, formula.o(.text.Formula023))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula023 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[71]"></a>Formula024</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, formula.o(.text.Formula024))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula024 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[72]"></a>Formula025</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, formula.o(.text.Formula025))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula025 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[73]"></a>Formula026</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, formula.o(.text.Formula026))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[74]"></a>Formula027</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, formula.o(.text.Formula027))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[75]"></a>Formula028</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, formula.o(.text.Formula028))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula028 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[76]"></a>Formula029</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, formula.o(.text.Formula029))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula029 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[77]"></a>Formula030</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, formula.o(.text.Formula030))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[78]"></a>Formula031</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, formula.o(.text.Formula031))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[79]"></a>Formula032</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, formula.o(.text.Formula032))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[7a]"></a>Formula033</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, formula.o(.text.Formula033))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Formula033
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[7b]"></a>Formula034</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, formula.o(.text.Formula034))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula034 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[7c]"></a>Formula035</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, formula.o(.text.Formula035))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Formula035
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[7d]"></a>Formula036</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, formula.o(.text.Formula036))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula036 &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[7e]"></a>Formula037</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, formula.o(.text.Formula037))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula037 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[7f]"></a>Formula038</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, formula.o(.text.Formula038))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula038 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[80]"></a>Formula039</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, formula.o(.text.Formula039))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Formula039
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[81]"></a>Formula040</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, formula.o(.text.Formula040))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula040 &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[82]"></a>Formula041</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, formula.o(.text.Formula041))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula041 &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[83]"></a>Formula042</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, formula.o(.text.Formula042))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula042 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[84]"></a>Formula043</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, formula.o(.text.Formula043))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula043 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[85]"></a>Formula044</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, formula.o(.text.Formula044))
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[86]"></a>Formula045</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, formula.o(.text.Formula045))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula045 &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[87]"></a>Formula046</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, formula.o(.text.Formula046))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Formula046
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[88]"></a>Formula047</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, formula.o(.text.Formula047))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula047 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[89]"></a>Formula048</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, formula.o(.text.Formula048))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula048 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[8a]"></a>Formula049</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, formula.o(.text.Formula049))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula049 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[8b]"></a>Formula050</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, formula.o(.text.Formula050))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Formula050 &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formula.o(.rodata.DSControl)
</UL>
<P><STRONG><a name="[2a]"></a>GPDMA_COMBINE_IRQHandler</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, gpdma_mizar.o(.text.GPDMA_COMBINE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPDMA_COMBINE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Channel_active_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>GPDMA_ChannelConfigure</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, gpdma_mizar.o(.text.GPDMA_ChannelConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPDMA_ChannelConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Channel_active_flag
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Channel_active_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Transfer
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Send
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Receive
</UL>

<P><STRONG><a name="[12b]"></a>GPDMA_ChannelDisable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gpdma_mizar.o(.text.GPDMA_ChannelDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA_ChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Channel_active_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_PowerControl
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
</UL>

<P><STRONG><a name="[14d]"></a>GPDMA_ChannelGetCount</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gpdma_mizar.o(.text.GPDMA_ChannelGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetTxCount
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxCount
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GetDataCount
</UL>

<P><STRONG><a name="[12c]"></a>GPDMA_Initialize</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, gpdma_mizar.o(.text.GPDMA_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MISC_Enable_DMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Initialize
</UL>

<P><STRONG><a name="[12e]"></a>GPDMA_Uninitialize</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gpdma_mizar.o(.text.GPDMA_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MISC_Disable_DMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Uninitialize
</UL>

<P><STRONG><a name="[3e]"></a>GPIO4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, thinktech_mcp2515.o(.text.GPIO4_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[13c]"></a>GPIO_PinIntCfg</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, gpio_mizar.o(.text.GPIO_PinIntCfg))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_Init
</UL>

<P><STRONG><a name="[130]"></a>GPIO_PinIntClear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio_mizar.o(.text.GPIO_PinIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_Init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>GPIO_PinIntEnable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio_mizar.o(.text.GPIO_PinIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_Init
</UL>

<P><STRONG><a name="[13b]"></a>GPIO_PinSetDirection</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gpio_mizar.o(.text.GPIO_PinSetDirection))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_Init
</UL>

<P><STRONG><a name="[14c]"></a>GetSystemClock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, system_m100.o(.text.GetSystemClock))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
</UL>

<P><STRONG><a name="[11d]"></a>ISO15765_4_Config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, thinktech_obd.o(.text.ISO15765_4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ISO15765_4_Config &rArr; MCP2515_Init &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Drv
</UL>

<P><STRONG><a name="[132]"></a>ISO15765_4_DS</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, thinktech_obd.o(.text.ISO15765_4_DS))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ISO15765_4_DS &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_CANFrame
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_Drv
</UL>

<P><STRONG><a name="[137]"></a>ISO15765_4_DTC</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, thinktech_obd.o(.text.ISO15765_4_DTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ISO15765_4_DTC &rArr; PCBU &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_CANFrame
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCBU
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_Drv
</UL>

<P><STRONG><a name="[138]"></a>ISO15765_4_Drv</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, thinktech_obd.o(.text.ISO15765_4_Drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ISO15765_4_Drv &rArr; ISO15765_4_DTC &rArr; PCBU &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_CANFrame
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyDSStatus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_VIN
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_DTC
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_DS
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>ISO15765_4_VIN</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, thinktech_obd.o(.text.ISO15765_4_VIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ISO15765_4_VIN &rArr; Send_CANFrame &rArr; CAN_Send_Buffer &rArr; MCP2515_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_CANFrame
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_Drv
</UL>

<P><STRONG><a name="[131]"></a>MCP2515_Init</STRONG> (Thumb, 548 bytes, Stack size 32 bytes, thinktech_mcp2515.o(.text.MCP2515_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MCP2515_Init &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_WriteByte
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_Reset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_ReadByte
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinIntEnable
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinIntClear
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinIntCfg
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetDirection
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_Config
</UL>

<P><STRONG><a name="[56]"></a>MCP2515_ReadByte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, thinktech_mcp2515.o(.text.MCP2515_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCP2515_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Buffer
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive_Buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thinktech_obd.o(.text.Send_CANFrame)
</UL>
<P><STRONG><a name="[13e]"></a>MCP2515_Reset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, thinktech_mcp2515.o(.text.MCP2515_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCP2515_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_Init
</UL>

<P><STRONG><a name="[55]"></a>MCP2515_WriteByte</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, thinktech_mcp2515.o(.text.MCP2515_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCP2515_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_CANFrame
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Buffer
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive_Buffer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> thinktech_mcp2515.o(.text.MCP2515_Init)
<LI> thinktech_obd.o(.text.Send_CANFrame)
</UL>
<P><STRONG><a name="[12f]"></a>MISC_Disable_DMAC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc_mizar.o(.text.MISC_Disable_DMAC))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Uninitialize
</UL>

<P><STRONG><a name="[14a]"></a>MISC_Disable_SSP0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc_mizar.o(.text.MISC_Disable_SSP0))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Uninitialize
</UL>

<P><STRONG><a name="[15f]"></a>MISC_Disable_UART1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc_mizar.o(.text.MISC_Disable_UART1))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Uninitialize
</UL>

<P><STRONG><a name="[12d]"></a>MISC_Enable_DMAC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc_mizar.o(.text.MISC_Enable_DMAC))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Initialize
</UL>

<P><STRONG><a name="[144]"></a>MISC_Enable_SSP0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc_mizar.o(.text.MISC_Enable_SSP0))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Initialize
</UL>

<P><STRONG><a name="[159]"></a>MISC_Enable_UART1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc_mizar.o(.text.MISC_Enable_UART1))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
</UL>

<P><STRONG><a name="[11f]"></a>PCBU</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, thinktech_obd.o(.text.PCBU))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = PCBU &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_DTC
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula016
</UL>

<P><STRONG><a name="[139]"></a>ReadyDSStatus</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, thinktech_obd.o(.text.ReadyDSStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadyDSStatus &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_Drv
</UL>

<P><STRONG><a name="[54]"></a>SPI_callback_func</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, thinktech_mcp2515.o(.text.SPI_callback_func))
<BR>[Address Reference Count : 1]<UL><LI> thinktech_mcp2515.o(.text.MCP2515_Init)
</UL>
<P><STRONG><a name="[29]"></a>SSP0_COMBINE_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP0_COMBINE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSP0_COMBINE_IRQHandler &rArr; SSPx_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>SSP0_GPDMA_Rx_SignalEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP0_GPDMA_Rx_SignalEvent))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GPDMA_Rx_SignalEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.SSP0_Resources)
</UL>
<P><STRONG><a name="[a5]"></a>SSP0_GPDMA_Tx_SignalEvent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP0_GPDMA_Tx_SignalEvent))
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.SSP0_Resources)
</UL>
<P><STRONG><a name="[24]"></a>SSP1_COMBINE_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP1_COMBINE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSP1_COMBINE_IRQHandler &rArr; SSPx_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>SSP1_GPDMA_Rx_SignalEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP1_GPDMA_Rx_SignalEvent))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GPDMA_Rx_SignalEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.SSP1_Resources)
</UL>
<P><STRONG><a name="[a7]"></a>SSP1_GPDMA_Tx_SignalEvent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP1_GPDMA_Tx_SignalEvent))
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.SSP1_Resources)
</UL>
<P><STRONG><a name="[1f]"></a>SSP2_COMBINE_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP2_COMBINE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSP2_COMBINE_IRQHandler &rArr; SSPx_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>SSP2_GPDMA_Rx_SignalEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP2_GPDMA_Rx_SignalEvent))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GPDMA_Rx_SignalEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.SSP2_Resources)
</UL>
<P><STRONG><a name="[a9]"></a>SSP2_GPDMA_Tx_SignalEvent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP2_GPDMA_Tx_SignalEvent))
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.SSP2_Resources)
</UL>
<P><STRONG><a name="[1a]"></a>SSP3_COMBINE_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP3_COMBINE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSP3_COMBINE_IRQHandler &rArr; SSPx_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>SSP3_GPDMA_Rx_SignalEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP3_GPDMA_Rx_SignalEvent))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GPDMA_Rx_SignalEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.SSP3_Resources)
</UL>
<P><STRONG><a name="[ab]"></a>SSP3_GPDMA_Tx_SignalEvent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP3_GPDMA_Tx_SignalEvent))
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.SSP3_Resources)
</UL>
<P><STRONG><a name="[141]"></a>SSPx_GPDMA_Rx_SignalEvent</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSPx_GPDMA_Rx_SignalEvent))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP3_GPDMA_Rx_SignalEvent
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP2_GPDMA_Rx_SignalEvent
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_GPDMA_Rx_SignalEvent
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_GPDMA_Rx_SignalEvent
</UL>

<P><STRONG><a name="[133]"></a>Send_CANFrame</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, thinktech_obd.o(.text.Send_CANFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Send_CANFrame &rArr; CAN_Send_Buffer &rArr; MCP2515_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_WriteByte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Buffer
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_VIN
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_DTC
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_DS
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_Drv
</UL>

<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, system_m100.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clean_ESP8266_RX_BUF
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Drv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[150]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, system_m100.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemClock
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>SystemInit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, system_m100.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(.text)
</UL>
<P><STRONG><a name="[14e]"></a>TMR_Drv</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, thinktech_timer.o(.text.TMR_Drv))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[34]"></a>UART0_COMBINE_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_mizar.o(.text.UART0_COMBINE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_COMBINE_IRQHandler &rArr; UART_COMBINE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_COMBINE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART1_COMBINE_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_mizar.o(.text.UART1_COMBINE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_COMBINE_IRQHandler &rArr; UART_COMBINE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_COMBINE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m100.o(RESET)
</UL>
<P><STRONG><a name="[152]"></a>UART_COMBINE_IRQHandler</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, usart_mizar.o(.text.UART_COMBINE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_COMBINE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxLineIntHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_COMBINE_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_COMBINE_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>UART_callback</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, system_m100.o(.text.UART_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_m100.o(.text.stdout_putchar)
</UL>
<P><STRONG><a name="[11b]"></a>USART_Check_Cmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, system_m100.o(.text.USART_Check_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_Check_Cmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Drv
</UL>

<P><STRONG><a name="[10b]"></a>_sys_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[f7]"></a>_sys_flen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[f8]"></a>_sys_istty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[108]"></a>_sys_open</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, retarget_io.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_open
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[105]"></a>_sys_seek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[106]"></a>_sys_write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, retarget_io.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[cd]"></a>main</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, bsp_test.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main &rArr; ISO15765_4_Drv &rArr; ISO15765_4_DTC &rArr; PCBU &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_Drv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Drv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[134]"></a>mdelay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, system_m100.o(.text.mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mdelay &rArr; udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_DS
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_Drv
</UL>

<P><STRONG><a name="[162]"></a>stdout_putchar</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, system_m100.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[163]"></a>udelay</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, system_m100.o(.text.udelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>

<P><STRONG><a name="[e7]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[165]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[164]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[166]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[167]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[e8]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e9]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[168]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[ec]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[de]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[52]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula050
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula049
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula048
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula047
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula045
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula043
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula042
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula041
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula040
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula038
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula037
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula036
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula034
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula029
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula028
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula025
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula024
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula023
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula020
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula018
</UL>

<P><STRONG><a name="[16a]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula050
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula047
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula041
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula040
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula038
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula036
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula029
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula024
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula020
</UL>

<P><STRONG><a name="[16d]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula049
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula048
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula045
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula043
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula042
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula041
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula037
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula036
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula034
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula028
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula018
</UL>

<P><STRONG><a name="[170]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula049
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula048
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula045
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula043
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula042
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula041
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula037
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula036
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula034
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula025
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula023
</UL>

<P><STRONG><a name="[1b0]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[121]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula050
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula047
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula040
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula038
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula029
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula028
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula024
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula020
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula018
</UL>

<P><STRONG><a name="[1b1]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[122]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula049
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula048
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula047
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula043
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula042
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula038
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula037
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula034
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula029
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula028
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula025
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula024
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula023
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula020
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula018
</UL>

<P><STRONG><a name="[171]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16c]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[16f]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[172]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765_4_DS
</UL>

<P><STRONG><a name="[174]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula039
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula035
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula021
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula019
</UL>

<P><STRONG><a name="[1b3]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[11e]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula046
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula033
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula022
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formula000
</UL>

<P><STRONG><a name="[1b4]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[175]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[16b]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[b3]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[b7]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[128]"></a>Clear_Channel_active_flag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpdma_mizar.o(.text.Clear_Channel_active_flag))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelDisable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_COMBINE_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>Set_Channel_active_flag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpdma_mizar.o(.text.Set_Channel_active_flag))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>

<P><STRONG><a name="[95]"></a>SSP0_Control</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP0_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SSP0_Control &rArr; SSPx_Control &rArr; GPDMA_ChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.Driver_SPI0)
</UL>
<P><STRONG><a name="[94]"></a>SSP0_GetDataCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP0_GetDataCount))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.Driver_SPI0)
</UL>
<P><STRONG><a name="[96]"></a>SSP0_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP0_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP0_GetStatus &rArr; SSPx_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.Driver_SPI0)
</UL>
<P><STRONG><a name="[8e]"></a>SSP0_Initialize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssp_mizar.o(.text.SSP0_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSP0_Initialize &rArr; SSPx_Initialize &rArr; GPDMA_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MISC_Enable_SSP0
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.Driver_SPI0)
</UL>
<P><STRONG><a name="[90]"></a>SSP0_PowerControl</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP0_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSP0_PowerControl &rArr; SSPx_PowerControl &rArr; GPDMA_ChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.Driver_SPI0)
</UL>
<P><STRONG><a name="[92]"></a>SSP0_Receive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP0_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSP0_Receive &rArr; SSPx_Receive &rArr; GPDMA_ChannelConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.Driver_SPI0)
</UL>
<P><STRONG><a name="[91]"></a>SSP0_Send</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP0_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSP0_Send &rArr; SSPx_Send &rArr; GPDMA_ChannelConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.Driver_SPI0)
</UL>
<P><STRONG><a name="[93]"></a>SSP0_Transfer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP0_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSP0_Transfer &rArr; SSPx_Transfer &rArr; GPDMA_ChannelConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.Driver_SPI0)
</UL>
<P><STRONG><a name="[8f]"></a>SSP0_Uninitialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssp_mizar.o(.text.SSP0_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSP0_Uninitialize &rArr; SSPx_Uninitialize &rArr; GPDMA_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MISC_Disable_SSP0
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.Driver_SPI0)
</UL>
<P><STRONG><a name="[8d]"></a>SSP_GetCapabilities</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.Driver_SPI0)
</UL>
<P><STRONG><a name="[8c]"></a>SSP_GetVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSP_GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> ssp_mizar.o(.rodata.Driver_SPI0)
</UL>
<P><STRONG><a name="[140]"></a>SSPx_Control</STRONG> (Thumb, 708 bytes, Stack size 32 bytes, ssp_mizar.o(.text.SSPx_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SSPx_Control &rArr; GPDMA_ChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelDisable
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemClock
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Control
</UL>

<P><STRONG><a name="[142]"></a>SSPx_GetDataCount</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssp_mizar.o(.text.SSPx_GetDataCount))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_GetDataCount
</UL>

<P><STRONG><a name="[143]"></a>SSPx_GetStatus</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ssp_mizar.o(.text.SSPx_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSPx_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_GetStatus
</UL>

<P><STRONG><a name="[13f]"></a>SSPx_IRQHandler</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, ssp_mizar.o(.text.SSPx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSPx_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP3_COMBINE_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP2_COMBINE_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_COMBINE_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_COMBINE_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>SSPx_Initialize</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ssp_mizar.o(.text.SSPx_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSPx_Initialize &rArr; GPDMA_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Initialize
</UL>

<P><STRONG><a name="[146]"></a>SSPx_PowerControl</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, ssp_mizar.o(.text.SSPx_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSPx_PowerControl &rArr; GPDMA_ChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_PowerControl
</UL>

<P><STRONG><a name="[147]"></a>SSPx_Receive</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, ssp_mizar.o(.text.SSPx_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSPx_Receive &rArr; GPDMA_ChannelConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Receive
</UL>

<P><STRONG><a name="[148]"></a>SSPx_Send</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, ssp_mizar.o(.text.SSPx_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSPx_Send &rArr; GPDMA_ChannelConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Send
</UL>

<P><STRONG><a name="[149]"></a>SSPx_Transfer</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, ssp_mizar.o(.text.SSPx_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSPx_Transfer &rArr; GPDMA_ChannelConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Transfer
</UL>

<P><STRONG><a name="[14b]"></a>SSPx_Uninitialize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssp_mizar.o(.text.SSPx_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSPx_Uninitialize &rArr; GPDMA_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Uninitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Uninitialize
</UL>

<P><STRONG><a name="[a1]"></a>USART1_Control</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_mizar.o(.text.USART1_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_Control &rArr; USART_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_mizar.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[98]"></a>USART1_GetCapabilities</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_mizar.o(.text.USART1_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> usart_mizar.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[a4]"></a>USART1_GetModemStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_mizar.o(.text.USART1_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_GetModemStatus &rArr; USART_GetModemStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_mizar.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[a0]"></a>USART1_GetRxCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_mizar.o(.text.USART1_GetRxCount))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_mizar.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[a2]"></a>USART1_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_mizar.o(.text.USART1_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_GetStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_mizar.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[9f]"></a>USART1_GetTxCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_mizar.o(.text.USART1_GetTxCount))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_mizar.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[99]"></a>USART1_Initialize</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usart_mizar.o(.text.USART1_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_Initialize &rArr; USART_Initialize &rArr; GPDMA_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MISC_Enable_UART1
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_mizar.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[9b]"></a>USART1_PowerControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_mizar.o(.text.USART1_PowerControl))
<BR>[Address Reference Count : 1]<UL><LI> usart_mizar.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[9d]"></a>USART1_Receive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_mizar.o(.text.USART1_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART1_Receive &rArr; USART_Receive &rArr; GPDMA_ChannelConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_mizar.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[9c]"></a>USART1_Send</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_mizar.o(.text.USART1_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART1_Send &rArr; USART_Send &rArr; GPDMA_ChannelConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_mizar.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[a3]"></a>USART1_SetModemControl</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_mizar.o(.text.USART1_SetModemControl))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetModemControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_mizar.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[9e]"></a>USART1_Transfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart_mizar.o(.text.USART1_Transfer))
<BR>[Address Reference Count : 1]<UL><LI> usart_mizar.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[9a]"></a>USART1_Uninitialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart_mizar.o(.text.USART1_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_Uninitialize &rArr; USART_Uninitialize &rArr; GPDMA_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MISC_Disable_UART1
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_mizar.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[154]"></a>USART_Control</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, usart_mizar.o(.text.USART_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Control
</UL>

<P><STRONG><a name="[155]"></a>USART_GetModemStatus</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, usart_mizar.o(.text.USART_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetModemStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetModemStatus
</UL>

<P><STRONG><a name="[156]"></a>USART_GetRxCount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart_mizar.o(.text.USART_GetRxCount))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetRxCount
</UL>

<P><STRONG><a name="[157]"></a>USART_GetStatus</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, usart_mizar.o(.text.USART_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetStatus
</UL>

<P><STRONG><a name="[158]"></a>USART_GetTxCount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart_mizar.o(.text.USART_GetTxCount))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetTxCount
</UL>

<P><STRONG><a name="[15a]"></a>USART_Initialize</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, usart_mizar.o(.text.USART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_Initialize &rArr; GPDMA_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Initialize
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemClock
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
</UL>

<P><STRONG><a name="[15b]"></a>USART_Receive</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usart_mizar.o(.text.USART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_Receive &rArr; GPDMA_ChannelConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Receive
</UL>

<P><STRONG><a name="[153]"></a>USART_RxLineIntHandler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usart_mizar.o(.text.USART_RxLineIntHandler))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_COMBINE_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>USART_Send</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, usart_mizar.o(.text.USART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_Send &rArr; GPDMA_ChannelConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send
</UL>

<P><STRONG><a name="[15d]"></a>USART_SetModemControl</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, usart_mizar.o(.text.USART_SetModemControl))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SetModemControl
</UL>

<P><STRONG><a name="[15e]"></a>USART_Uninitialize</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, usart_mizar.o(.text.USART_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_Uninitialize &rArr; GPDMA_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Uninitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Uninitialize
</UL>

<P><STRONG><a name="[97]"></a>USARTx_GetVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart_mizar.o(.text.USARTx_GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> usart_mizar.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[57]"></a>SetPllFreq</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, system_m100.o(.text.SetPllFreq))
<BR>[Address Reference Count : 1]<UL><LI> system_m100.o(.text.SystemInit)
</UL>
<P><STRONG><a name="[173]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[16e]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[e5]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[51]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
